{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar FeedbackScreen = function FeedbackScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    feedback = _useState2[0],\n    setFeedback = _useState2[1];\n  var handleFeedbackChange = function handleFeedbackChange(text) {\n    setFeedback(text);\n  };\n  var handleSubmitFeedback = function handleSubmitFeedback() {\n    console.log(\"Submitted feedback:\", feedback);\n    setFeedback('');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Provide Feedback\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      multiline: true,\n      placeholder: \"Type your feedback here...\",\n      value: feedback,\n      onChangeText: handleFeedbackChange\n    }), _jsx(Button, {\n      title: \"Submit\",\n      onPress: handleSubmitFeedback\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#F5F5F5'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  input: {\n    height: 120,\n    borderWidth: 1,\n    borderColor: '#CCCCCC',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 20\n  }\n});\nexport default FeedbackScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","jsx","_jsx","jsxs","_jsxs","FeedbackScreen","_useState","_useState2","_slicedToArray","feedback","setFeedback","handleFeedbackChange","text","handleSubmitFeedback","console","log","style","styles","container","children","title","input","multiline","placeholder","value","onChangeText","onPress","create","flex","padding","backgroundColor","fontSize","fontWeight","marginBottom","height","borderWidth","borderColor","borderRadius"],"sources":["C:/Users/mgupt/OneDrive/Desktop/cpy4/FeedbackScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet } from 'react-native';\r\n\r\nconst FeedbackScreen = () => {\r\n  const [feedback, setFeedback] = useState('');\r\n\r\n  const handleFeedbackChange = (text) => {\r\n    setFeedback(text);\r\n  };\r\n\r\n  const handleSubmitFeedback = () => {\r\n    // You can handle the submission of feedback here, e.g., send it to a server\r\n    console.log(\"Submitted feedback:\", feedback);\r\n    // Reset the feedback input\r\n    setFeedback('');\r\n    // You can also show a success message to the user\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Provide Feedback</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        multiline\r\n        placeholder=\"Type your feedback here...\"\r\n        value={feedback}\r\n        onChangeText={handleFeedbackChange}\r\n      />\r\n      <Button title=\"Submit\" onPress={handleSubmitFeedback} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n    backgroundColor: '#F5F5F5',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    height: 120,\r\n    borderWidth: 1,\r\n    borderColor: '#CCCCCC',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 20,\r\n  },\r\n});\r\n\r\nexport default FeedbackScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGxC,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAC3B,IAAAC,SAAA,GAAgCX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,IAAI,EAAK;IACrCF,WAAW,CAACE,IAAI,CAAC;EACnB,CAAC;EAED,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;IAEjCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,QAAQ,CAAC;IAE5CC,WAAW,CAAC,EAAE,CAAC;EAEjB,CAAC;EAED,OACEN,KAAA,CAACR,IAAI;IAACoB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BjB,IAAA,CAACL,IAAI;MAACmB,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,EAAC;IAAgB,CAAM,CAAC,EAClDjB,IAAA,CAACJ,SAAS;MACRkB,KAAK,EAAEC,MAAM,CAACI,KAAM;MACpBC,SAAS;MACTC,WAAW,EAAC,4BAA4B;MACxCC,KAAK,EAAEf,QAAS;MAChBgB,YAAY,EAAEd;IAAqB,CACpC,CAAC,EACFT,IAAA,CAACH,MAAM;MAACqB,KAAK,EAAC,QAAQ;MAACM,OAAO,EAAEb;IAAqB,CAAE,CAAC;EAAA,CACpD,CAAC;AAEX,CAAC;AAED,IAAMI,MAAM,GAAGjB,UAAU,CAAC2B,MAAM,CAAC;EAC/BT,SAAS,EAAE;IACTU,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAE;EACnB,CAAC;EACDV,KAAK,EAAE;IACLW,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE;EAChB,CAAC;EACDZ,KAAK,EAAE;IACLa,MAAM,EAAE,GAAG;IACXC,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,SAAS;IACtBC,YAAY,EAAE,CAAC;IACfR,OAAO,EAAE,EAAE;IACXI,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AAEF,eAAe5B,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}